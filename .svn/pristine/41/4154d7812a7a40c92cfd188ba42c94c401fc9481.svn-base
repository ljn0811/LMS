package kr.happyjob.study.tut.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.happyjob.study.tut.model.LecturePlanVO;
import kr.happyjob.study.tut.service.LecturePlanService;


@Controller
@RequestMapping("/tut/")
public class LecturePlanController {
   
   @Autowired
   LecturePlanService lecturePlanService;
   
   // Set logger
   private final Logger logger = LogManager.getLogger(this.getClass());

   // Get class name for logger
   private final String className = this.getClass().toString();
   
   /**
    * 강의계획서 초기화면
    */
   @RequestMapping("lecturePlan.do")
   public String lecturePlan(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className + ".LecturePlan");
      logger.info("   - paramMap : " + paramMap);
		
      
      int userno = (int) session.getAttribute("user_no");
      paramMap.put("user_no", userno);
      LecturePlanVO lecUserInfo = lecturePlanService.lecUserinfo(paramMap);
      List<LecturePlanVO> listData = lecturePlanService.lecturePlan(paramMap);
      
      
      model.addAttribute("lecUserInfo",lecUserInfo);
      model.addAttribute("listData",listData);
      
      logger.info("+ End " + className + ".LecturePlan");

      return "tut/lecturePlan";
   } 
   
   // 강의계획서 목록 불러오기
   @RequestMapping("lecturePlanList.do")
	public String lecturePlanList( @RequestParam Map<String, Object> paramMap, Model model, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".lecturePlanList");
		logger.info("   - paramMap : " + paramMap);
		
		int cpage = Integer.valueOf((String)paramMap.get("cpage"));
		int pagesize = Integer.valueOf((String)paramMap.get("pagesize"));
		int startpos = (cpage - 1) * pagesize;
		
		paramMap.put("startpos", startpos);
		paramMap.put("pagesize", pagesize);
		
		List<LecturePlanVO> listData = lecturePlanService.lecturePlanList(paramMap);
		int listCnt = lecturePlanService.lecturePlanCnt(paramMap);
		
		model.addAttribute("listData",listData);
		model.addAttribute("listCnt",listCnt);
		
		logger.info("+ End " + className + ".lecturePlanList");

		return "tut/lecturePlanList";
	}	
   
	@RequestMapping("lecturePlanDetail.do")
	@ResponseBody
	public Map<String, Object> lecturePlanDetail( @RequestParam Map<String, Object> paramMap, Model model, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".lecturePlanDetail");
		logger.info("   - paramMap : " + paramMap);
		
		Map<String, Object> returnmap = new HashMap<String, Object>();
		
		LecturePlanVO selinfo = lecturePlanService.lecturePlanDetail(paramMap);
		returnmap.put("selinfo", selinfo);
		
		logger.info("+ End " + className + ".lecturePlanDetail");

		return returnmap;
	}	
 
	// 강의 계획서 등록
	@RequestMapping("lecturePlanSave.do")
	@ResponseBody
	public Map<String, Object> lecturePlanSave( @RequestParam Map<String, Object> paramMap, Model model, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".lecturePlanSave");
		logger.info("   - paramMap : " + paramMap);
		
		Map<String, Object> returnmap = new HashMap<String, Object>();
		
		String action = (String) paramMap.get("action");
		int sreturn = 0;
		String result = "";
		String resultmsg = "";

		if("I".equals(action)) {						
			sreturn = lecturePlanService.lecturePlanSave(paramMap);
		} else if("U".equals(action)) {
			sreturn = lecturePlanService.lecturePlanUpdate(paramMap);
		} else if("D".equals(action)) {
			sreturn = lecturePlanService.lecturePlanDelete(paramMap);
		}
		
		if(sreturn >= 0) {
			result = "S";			
			if("D".equals(action)) {
				resultmsg = "삭제 되었습니다.";
			} else {
				resultmsg = "저장 되었습니다.";
			}
			
		} else {
			result = "F";			
			if("D".equals(action)) {
				resultmsg = "삭제 실패 했습니다.";
			} else {
				resultmsg = "저장에 실패 했습니다.";
			}
			
		}
		
		returnmap.put("result",result);
		returnmap.put("resultmsg",resultmsg);
		
		logger.info("+ End " + className + ".lecturePlanSave");

		return returnmap;
	}	
}